{"version":3,"sources":["webpack:///./src/components/TouchDisplay.css","webpack:///./src/components/GameControls.css","webpack:///./src/components/ManaControls.css","webpack:///./src/components/App.css","webpack:///./src/components/PlayerControls.css","webpack:///./src/hooks/useTouchEvents.js","webpack:///./src/components/TouchDisplay.js","webpack:///./src/components/Counter.js","webpack:///./src/hooks/useCounter.js","webpack:///./src/hooks/useMana.js","webpack:///./src/components/ManaControls.js","webpack:///./src/components/PlayerControls.js","webpack:///./src/components/GameControls.js","webpack:///./src/hooks/useCoinFlip.js","webpack:///./src/components/App.js","webpack:///./src/index.js"],"names":["module","exports","LONG_PRESS_TIMEOUT","TouchDisplay","children","orientation","targets","className","styles","touchDisplay","classNames","touchTargets","map","i","onTap","onLongPress","TouchTarget","isPressed","eventHandlers","longPressTimeout","timeoutRef","useRef","useEffect","current","clearTimeout","pressedRef","showPressIndicator","setShowPressIndicator","useState","setPressed","useCallback","pressed","runIfPressed","fn","onPointerDown","e","stopPropagation","setTimeout","onPointerUp","onPointerLeave","useTouchEvents","touchTarget","Counter","increment","decrement","reset","touchDisplayProps","defaultProps","amount","Math","max","useCounter","initialValue","currentValue","dispatch","useReducer","value","action","INITIAL_MANA","colorless","white","blue","black","red","green","MANA_BACKGROUND_COLORS","ManaControls","mana","currentMana","type","color","useMana","manaControls","manaControl","style","backgroundColor","INITIAL_LIFE","INITIAL_POISON","PlayerControls","flip","life","lifeActions","poison","poisonActions","playerControls","lifeContainer","console","log","poisonContainer","GameControls","storm","stormActions","flipActions","random","useCoinFlip","gameControls","stormCounter","coinFlip","coinFlipResultOverlay","coinFlipResultModal","App","root","window","oncontextmenu","event","preventDefault","initReactFastclick","ReactDOM","render","document","getElementById"],"mappings":"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","file":"js/main.2e22e9a23cb28ed0f253.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"touchDisplay\":\"touchDisplay___1kIlj\",\"touchTargets\":\"touchTargets___2vCum\",\"vertical\":\"vertical___3oVLw\",\"touchTarget\":\"touchTarget___NqDX_\",\"pressed\":\"pressed___2JohK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"gameControls\":\"gameControls___Htvk8\",\"stormCounter\":\"stormCounter___9YEVz\",\"coinFlip\":\"coinFlip___3Q1gg\",\"coinFlipResultOverlay\":\"coinFlipResultOverlay___Sabua\",\"coinFlipResultModal\":\"coinFlipResultModal___3dD2s\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"manaControls\":\"manaControls___UHiRg\",\"manaControl\":\"manaControl___16pq5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"root___1cMNh\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"playerControls\":\"playerControls___3PvVH\",\"flip\":\"flip___2H7eo\",\"lifeContainer\":\"lifeContainer___1Yy74\",\"life\":\"life___2cbFj\",\"poisonContainer\":\"poisonContainer___3qTkM\",\"poison\":\"poison___3eIE-\"};","// @flow\nimport { useCallback, useState, useEffect, useRef } from 'react';\n\ntype Input = {|\n  onTap: () => void,\n  onLongPress: () => void,\n|};\n\ntype OutputHandlers = {\n  onPointerDown: (SyntheticPointerEvent<HTMLElement>) => void,\n  onPointerUp: (SyntheticPointerEvent<HTMLElement>) => void,\n  onPointerLeave: (SyntheticPointerEvent<HTMLElement>) => void,\n};\n\ntype Output = [boolean, OutputHandlers];\n\nconst LONG_PRESS_TIMEOUT = 600;\n\nexport default function useTouchEvents(\n  { onTap, onLongPress }: Input,\n  longPressTimeout?: number = LONG_PRESS_TIMEOUT,\n): Output {\n  // Create a ref to store the long press timeout.\n  // Make sure to clear it when the component unmounts.\n  const timeoutRef = useRef<?TimeoutID>(null);\n  useEffect(() => {\n    return () => {\n      if (timeoutRef.current != null) clearTimeout(timeoutRef.current);\n    };\n  }, []);\n\n  // Create a ref to store the press state. This is necessary because closure\n  // scope in timeouts seems to cause problems if we just store this as state.\n  const pressedRef = useRef<boolean>(false);\n\n  // ...but also store this value in state so that rerenders happen properly.\n  const [showPressIndicator, setShowPressIndicator] = useState(false);\n\n  // This function unifies the state representation of \"pressed\" with the\n  // ref representation. The event handlers all use this.\n  const setPressed = useCallback((pressed: boolean) => {\n    if (timeoutRef.current != null) clearTimeout(timeoutRef.current);\n    setShowPressIndicator(pressed);\n    pressedRef.current = pressed;\n  }, []);\n\n  // Additionally, for both taps and long presses, we want to run code\n  // only if a press is still occuring. This unifies that logic.\n  const runIfPressed = useCallback((fn: () => void) => {\n    if (pressedRef.current) fn();\n  }, []);\n\n  // When the user clicks/taps, enter the pressed state. Also begin a\n  // timeout to detect a long press.\n  const onPointerDown = useCallback(\n    (e) => {\n      e.stopPropagation();\n      setPressed(true);\n\n      timeoutRef.current = setTimeout(() => {\n        runIfPressed(onLongPress);\n        setPressed(false);\n      }, longPressTimeout);\n    },\n    [longPressTimeout, onLongPress, runIfPressed, setPressed],\n  );\n\n  // When the user finishes their click/tap, exit the pressed state.\n  // If a long press hasn't already happened, trigger the tap handler.\n  const onPointerUp = useCallback(\n    (e) => {\n      e.stopPropagation();\n      runIfPressed(onTap);\n      setPressed(false);\n    },\n    [onTap, runIfPressed, setPressed],\n  );\n\n  // Clear everything if the user doesn't stay in the container.\n  const onPointerLeave = useCallback(() => setPressed(false), [setPressed]);\n\n  return [\n    showPressIndicator,\n    {\n      onPointerDown,\n      onPointerUp,\n      onPointerLeave,\n    },\n  ];\n}\n","// @flow\nimport React from 'react';\nimport classNames from 'classnames';\nimport useTouchEvents from '../hooks/useTouchEvents';\nimport styles from './TouchDisplay.css';\n\ntype TargetProps = {|\n  onTap: () => void,\n  onLongPress?: () => void,\n|};\n\ntype Props = {|\n  children: React$Node,\n  orientation: 'horizontal' | 'vertical',\n  targets: Array<TargetProps>,\n|};\n\nexport default function TouchDisplay({ children, orientation, targets }: Props) {\n  return (\n    <div className={styles.touchDisplay}>\n      <div\n        className={classNames({\n          [styles.touchTargets]: true,\n          [styles[orientation]]: true,\n        })}\n      >\n        {targets.map(({ onTap, onLongPress }, i) => (\n          <TouchTarget key={i} onTap={onTap} onLongPress={onLongPress} />\n        ))}\n      </div>\n      {children}\n    </div>\n  );\n}\nTouchDisplay.defaultProps = {\n  orientation: 'horizontal',\n};\n\nfunction TouchTarget({ onTap, onLongPress }: TargetProps) {\n  const [isPressed, eventHandlers] = useTouchEvents({\n    onTap,\n    onLongPress: onLongPress || onTap,\n  });\n\n  return (\n    <div\n      className={classNames({\n        [styles.touchTarget]: true,\n        [styles.pressed]: isPressed,\n      })}\n      {...eventHandlers}\n    />\n  );\n}\n","// @flow\nimport React from 'react';\nimport TouchDisplay from './TouchDisplay';\nimport type { CounterActions } from '../hooks/useCounter';\n\ntype TouchDisplayConfig = React$ElementConfig<typeof TouchDisplay>;\n\ntype Props = {|\n  ...$Rest<TouchDisplayConfig, { targets: * }>,\n  ...CounterActions,\n|};\n\nexport default function Counter({\n  increment,\n  decrement,\n  reset,\n  ...touchDisplayProps\n}: Props) {\n  const targets = [\n    {\n      onTap: decrement,\n      onLongPress: reset,\n    },\n    {\n      onTap: increment,\n      onLongPress: reset,\n    },\n  ];\n\n  return <TouchDisplay {...touchDisplayProps} targets={targets} />;\n}\n","// @flow\nimport { useReducer } from 'react';\n\nexport function increment(amount: number): number {\n  return amount + 1;\n}\n\nexport function decrement(amount: number): number {\n  return Math.max(amount - 1, 0);\n}\n\ntype CounterAction = 'increment' | 'decrement' | 'reset';\n\nexport type CounterActions = {|\n  increment: () => void,\n  decrement: () => void,\n  reset: () => void,\n|};\n\nexport default function useCounter(initialValue: number): [number, CounterActions] {\n  const [currentValue, dispatch] = useReducer((value: number, action: CounterAction) => {\n    switch (action) {\n      case 'increment':\n        return value + 1;\n      case 'decrement':\n        return Math.max(value - 1, 0);\n      case 'reset':\n        return initialValue;\n      default:\n        return value;\n    }\n  }, initialValue);\n\n  const actions: CounterActions = {\n    increment: () => dispatch('increment'),\n    decrement: () => dispatch('decrement'),\n    reset: () => dispatch('reset'),\n  };\n\n  return [currentValue, actions];\n}\n","// @flow\nimport { useReducer } from 'react';\nimport { increment, decrement } from './useCounter';\n\nexport type Mana = {|\n  colorless: number,\n  white: number,\n  blue: number,\n  black: number,\n  red: number,\n  green: number,\n|};\nexport type Color = $Keys<Mana>;\n\nconst INITIAL_MANA: Mana = {\n  colorless: 0,\n  white: 0,\n  blue: 0,\n  black: 0,\n  red: 0,\n  green: 0,\n};\n\ntype ManaAction =\n  | { type: 'increment', color: Color }\n  | { type: 'decrement', color: Color }\n  | { type: 'reset' };\n\nexport type ManaActions = {|\n  increment: (color: Color) => void,\n  decrement: (color: Color) => void,\n  reset: () => void,\n|};\n\nexport default function useMana(): [Mana, ManaActions] {\n  const [currentMana, dispatch] = useReducer((mana: Mana, action: ManaAction) => {\n    switch (action.type) {\n      case 'increment':\n        return { ...mana, [action.color]: increment(mana[action.color]) };\n      case 'decrement':\n        return { ...mana, [action.color]: decrement(mana[action.color]) };\n      case 'reset':\n        return INITIAL_MANA;\n      default:\n        return mana;\n    }\n  }, INITIAL_MANA);\n\n  const actions: ManaActions = {\n    increment: (color) => dispatch({ type: 'increment', color }),\n    decrement: (color) => dispatch({ type: 'decrement', color }),\n    reset: () => dispatch({ type: 'reset' }),\n  };\n\n  return [currentMana, actions];\n}\n","// @flow\nimport Counter from './Counter';\nimport React from 'react';\nimport styles from './ManaControls.css';\nimport useMana from '../hooks/useMana';\n\nconst MANA_BACKGROUND_COLORS = {\n  colorless: 'rgb(155,122,103)',\n  white: 'rgb(248,231,185)',\n  blue: 'rgb(179,206,234)',\n  black: 'rgb(166,159,157)',\n  red: 'rgb(235,159,130)',\n  green: 'rgb(166,211,182)',\n};\n\nexport default function ManaControls() {\n  const [mana, { increment, decrement, reset }] = useMana();\n\n  return (\n    <div className={styles.manaControls}>\n      {['colorless', 'white', 'blue', 'black', 'red', 'green'].map((color) => (\n        <div\n          key={color}\n          className={styles.manaControl}\n          style={{\n            backgroundColor: MANA_BACKGROUND_COLORS[color],\n          }}\n        >\n          <Counter\n            orientation=\"vertical\"\n            increment={() => increment(color)}\n            decrement={() => decrement(color)}\n            reset={reset}\n          >\n            {mana[color]}\n          </Counter>\n        </div>\n      ))}\n    </div>\n  );\n}\n","// @flow\nimport React from 'react';\nimport classNames from 'classnames';\nimport styles from './PlayerControls.css';\nimport Counter from './Counter';\nimport ManaControls from './ManaControls';\nimport useCounter from '../hooks/useCounter';\n\nconst INITIAL_LIFE = 20;\nconst INITIAL_POISON = 0;\n\ntype Props = {|\n  flip?: boolean,\n|};\n\nexport default function PlayerControls({ flip }: Props) {\n  const [life, lifeActions] = useCounter(INITIAL_LIFE);\n  const [poison, poisonActions] = useCounter(INITIAL_POISON);\n\n  return (\n    <div className={classNames(styles.playerControls, flip && styles.flip)}>\n      <div className={styles.lifeContainer}>\n        <Counter\n          orientation=\"horizontal\"\n          {...lifeActions}\n          increment={() => {\n            console.log('increment life');\n            lifeActions.increment();\n          }}\n        >\n          <div className={styles.life}>{life}</div>\n        </Counter>\n      </div>\n      <div className={styles.poisonContainer}>\n        <Counter orientation=\"horizontal\" {...poisonActions}>\n          <div className={styles.poison}>{poison} Poison</div>\n        </Counter>\n      </div>\n      <ManaControls />\n    </div>\n  );\n}\n","// @flow\nimport React from 'react';\nimport styles from './GameControls.css';\nimport Counter from './Counter';\nimport TouchDisplay from './TouchDisplay';\nimport useCounter from '../hooks/useCounter';\nimport useCoinFlip from '../hooks/useCoinFlip';\n\nexport default function GameControls() {\n  const [storm, stormActions] = useCounter(0);\n  const [flip, flipActions] = useCoinFlip();\n\n  return (\n    <div className={styles.gameControls}>\n      <div className={styles.stormCounter}>\n        <Counter orientation=\"horizontal\" {...stormActions}>\n          Storm: {storm}\n        </Counter>\n      </div>\n      <div className={styles.coinFlip}>\n        <TouchDisplay targets={[{ onTap: flipActions.flip }]}>Flip Coin</TouchDisplay>\n      </div>\n      {flip != null && (\n        <div className={styles.coinFlipResultOverlay} onPointerUp={flipActions.reset}>\n          <div className={styles.coinFlipResultModal}>\n            <div>{flip ? '⇧' : '⇩'}</div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n","// @flow\nimport { useReducer } from 'react';\n\ntype CoinFlipAction = 'flip' | 'reset';\n\nexport type CoinFlipActions = {|\n  flip: () => void,\n  reset: () => void,\n|};\n\nexport default function useCoinFlip(): [?boolean, CoinFlipActions] {\n  const [currentValue, dispatch] = useReducer(\n    (value: ?boolean, action: CoinFlipAction) => {\n      switch (action) {\n        case 'flip':\n          return Math.random() > 0.5 ? true : false;\n        case 'reset':\n          return null;\n        default:\n          return value;\n      }\n    },\n    null,\n  );\n\n  const actions: CoinFlipActions = {\n    flip: () => dispatch('flip'),\n    reset: () => dispatch('reset'),\n  };\n\n  return [currentValue, actions];\n}\n","// @flow\nimport React from 'react';\nimport { hot } from 'react-hot-loader/root';\nimport PlayerControls from './PlayerControls';\nimport GameControls from './GameControls';\nimport styles from './App.css';\n\nfunction App() {\n  return (\n    <div className={styles.root}>\n      <PlayerControls flip />\n      <GameControls />\n      <PlayerControls />\n    </div>\n  );\n}\n\nexport default hot(App);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport initReactFastclick from 'react-fastclick';\n\nimport './index.css';\n\n// Prevent context menu events\nwindow.oncontextmenu = function(event) {\n  event.preventDefault();\n  event.stopPropagation();\n  return false;\n};\n\n// Faster click events\ninitReactFastclick();\n\nReactDOM.render(<App />, document.getElementById('app'));\n"],"sourceRoot":""}